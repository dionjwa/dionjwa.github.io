"use strict";(self.webpackChunkdionjwa_resume_docusaurus=self.webpackChunkdionjwa_resume_docusaurus||[]).push([[1477],{10:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"/feasibility-whales-in-space","metadata":{"permalink":"/blog/feasibility-whales-in-space","source":"@site/blog/blog/feasibility-whales-in-space.md","title":"Question- can we get whales into space, if they would be better in space than we are?","description":"2024-01-21","date":"2025-03-29T03:42:26.287Z","formattedDate":"March 29, 2025","tags":[],"hasTruncateMarker":false,"authors":[{"name":"Dion Whitehead","title":"Metapages Inventor","url":"https://evolvedeeptimecomplex.systems/","imageURL":"https://github.com/dionjwa.png","key":"dion"}],"frontMatter":{"title":"Question- can we get whales into space, if they would be better in space than we are?","sidebar_position":11,"slug":"/feasibility-whales-in-space","authors":["dion"]},"unlisted":false,"nextItem":{"title":"Data room- Tools / Software matched to job","permalink":"/blog/tools-for-the-job"}},"content":"2024-01-21 \\n\\n\\n# Is it at all possible to get whales into space? Assume it\u2019s a good idea, then think about what it would take to do so. {#2f7830909de04ba4af615d51d0a5d8eb}\\n\\n\\n![](./744654187.jpg)\\n\\n\\nWhat are the logistical challenges in having whales be the spacefaring race. This makes senes because whales have evolved for low-gravity, which is very harmful to humans, and live in dark and cold environments. Please use as much known physics and math as possible, for example, current rate of increase of mass delivered to space, for making a high level estimation for the feasibility of getting a whale into space. Consider that the whale will need a minimum amount of water.\\n\\n\\n# ChatGPT {#19e430d07cf345f6b55716adcec20ecc}\\n\\n\\nThe idea of whales as a spacefaring race presents a host of unique logistical challenges. Let\'s break down the major factors:\\n\\n1. **Adaptation to Low-Gravity Environment**: Whales, evolved for an aquatic environment, might theoretically be better suited to low gravity than land-dwelling creatures like humans. In water, whales experience buoyancy, which reduces the effect of Earth\'s gravity. However, space\'s microgravity environment is quite different from being buoyant in water. In microgravity, there\'s no resistance like water to help whales move or maintain their shape. Their bodies are adapted to be supported by water, and without it, they might face health issues.\\n2. **Life Support System**: Whales require a vast amount of water, which serves as their living medium. A whale in space would need a spacecraft filled with water to simulate its natural habitat. This leads to significant challenges:\\n\\t- **Mass of Water**: Water is heavy (1 cubic meter weighs 1 ton). A blue whale, for instance, could require thousands of cubic meters of water. Let\'s do a rough calculation considering a smaller whale species, like a Minke whale, which might need a minimum of 1000 cubic meters of water:\\n\\t- $Mass\xa0of\xa0Water=1000\xa0cubic\xa0meters\xd71000\xa0kg/cubic\xa0meter=1,000,000\xa0kg$\\n\\t- **Delivery to Space**: Current rockets can deliver about 20-25 tons (20,000-25,000 kg) to Low Earth Orbit (LEO). Assuming the most optimistic capacity of 25,000 kg per launch, we would need:\\n\\t- $Number\xa0of\xa0Launches=25,000\xa0kg/launch1,000,000\xa0kg\u200b=40\xa0launches$\\n\\n\\t\\tThis is for the water alone, not accounting for the spacecraft, life support systems, or the whale itself.\\n\\n3. **Temperature and Pressure Control**: Whales are adapted to specific pressure and temperature ranges. Any spacecraft would need to simulate these conditions, which adds to the complexity and mass of the spacecraft.\\n4. **Feeding and Waste Management**: Whales consume large quantities of food and produce significant waste. Any space mission would need to address how to supply food and manage waste in a zero-gravity environment filled with water.\\n5. **Psychological and Health Concerns**: The impact of space travel on the whale\'s psychology and physiology is unknown. Issues like bone density loss and muscle atrophy, seen in human astronauts, could also affect whales, albeit differently due to their aquatic nature.\\n6. **Cost and Resources**: The cost of launching the required mass to space is enormous. Considering the current cost per kilogram to LEO and the mass of water and life support systems needed, the financial resources would be substantial.\\n7. **Engineering Challenges**: Designing a spacecraft that can hold a whale, water, and life support systems is an unprecedented engineering challenge. It would require innovations in materials, propulsion, and life support systems.\\n\\nIn conclusion, while whales have certain characteristics that might seem advantageous for space travel, the practical challenges are enormous. The mass of water needed, life support requirements, and engineering challenges make this a highly impractical endeavor with current technology and understanding of space travel."},{"id":"/tools-for-the-job","metadata":{"permalink":"/blog/tools-for-the-job","source":"@site/blog/blog/tools-for-the-job.md","title":"Data room- Tools / Software matched to job","description":"See disk space usage","date":"2025-03-29T03:42:15.928Z","formattedDate":"March 29, 2025","tags":[],"hasTruncateMarker":false,"authors":[{"name":"Dion Whitehead","title":"Metapages Inventor","url":"https://evolvedeeptimecomplex.systems/","imageURL":"https://github.com/dionjwa.png","key":"dion"}],"frontMatter":{"title":"Data room- Tools / Software matched to job","sidebar_position":10,"slug":"/tools-for-the-job","authors":["dion"]},"unlisted":false,"prevItem":{"title":"Question- can we get whales into space, if they would be better in space than we are?","permalink":"/blog/feasibility-whales-in-space"},"nextItem":{"title":"Blob storage is a solved problem- what about compute?","permalink":"/blog/blob-storage-is-solved-but-what-about-compute"}},"content":"**See disk space usage**\\n\\n\\nGrandPerspective\\n\\n\\n**SVG Icons (free, no watermark, decent library)**\\n\\n\\n[https://iconsvg.xyz/](https://iconsvg.xyz/)\\n\\n\\n[https://www.svgrepo.com/](https://www.svgrepo.com/)\\n\\n\\n[https://www.flaticon.com/](https://www.flaticon.com/)\\n\\n\\n**Image Editing**\\n\\n\\nPixelmator Pro\\n\\n\\n**Screen capture, video of UI, tutorials, docs**\\n\\n\\n[link_preview](https://github.com/flameshot-org/flameshot)\\n\\n\\nScreen Studio (installed)\\n\\n\\n**Video Editing e.g. for webinars**\\n\\n\\n[https://www.techsmith.com/camtasia-pricing.html](https://www.techsmith.com/camtasia-pricing.html)\\n\\n\\nLumaFusion (installed)\\n\\n\\n**Create animated text/messaging conversation**\\n\\n\\n[https://chat-animator.com/](https://chat-animator.com/)\\n\\n\\n**Add AI ML to my app, integrated agents**\\n\\n\\nThis one is really good\\n\\n\\n[link_preview](https://github.com/langgenius/dify)\\n\\n\\nNot as good as dify but still good\\n\\n\\n[link_preview](https://github.com/danielmiessler/fabric)\\n\\n\\n**Forms**\\n\\n\\nThese look nice\\n\\n\\n[https://www.fillout.com/](https://www.fillout.com/)\\n\\n\\n**PDF Editing (when Preview etc isn\u2019t enough)**\\n\\n\\n[https://www.pdfescape.com/](https://www.pdfescape.com/)\\n\\n\\n**Secrets and Credentials**\\n\\n\\n[https://infisical.com/](https://infisical.com/)\\n\\n\\n**Headless Chome Drivers for cloud functions**\\n\\n\\n[https://github.com/microsoft/playwright](https://github.com/microsoft/playwright)\\n\\n\\n**Physical Mailboxes**\\n\\n\\nI\xa0used to use\xa0[https://www.usaddressinc.com/](https://www.usaddressinc.com/)\xa0they were great\\n\\n\\nWe use\xa0[https://travelingmailbox.com/](https://travelingmailbox.com/)\xa0it came recommended to us, we\'ve been happy.."},{"id":"/blob-storage-is-solved-but-what-about-compute","metadata":{"permalink":"/blog/blob-storage-is-solved-but-what-about-compute","source":"@site/blog/blog/blob-storage-is-solved-but-what-about-compute.md","title":"Blob storage is a solved problem- what about compute?","description":"Cheap and simple data blob storage is widely available and relatively easy to access and use. However, easily applying the right kind of compute is still laborious with too many complex barriers, arcane commands, hard to understand costs, and psychological anxiety that interrupts flow state when prototyping, analyzing, and generally doing data intensive research and engineering.","date":"2025-03-29T03:42:15.636Z","formattedDate":"March 29, 2025","tags":[],"hasTruncateMarker":true,"authors":[{"name":"Dion Whitehead","title":"Metapages Inventor","url":"https://evolvedeeptimecomplex.systems/","imageURL":"https://github.com/dionjwa.png","key":"dion"}],"frontMatter":{"title":"Blob storage is a solved problem- what about compute?","sidebar_position":9,"slug":"/blob-storage-is-solved-but-what-about-compute","authors":["dion"]},"unlisted":false,"prevItem":{"title":"Data room- Tools / Software matched to job","permalink":"/blog/tools-for-the-job"},"nextItem":{"title":"A New Kind of Scientific Publishing","permalink":"/blog/a-new-kind-of-scientific-publishing"}},"content":"Cheap and simple data blob storage is widely available and relatively easy to access and use. However, easily applying the right kind of compute is still laborious with too many complex barriers, arcane commands, hard to understand costs, and psychological anxiety that interrupts flow state when prototyping, analyzing, and generally doing data intensive research and engineering.\\n\\n\\n{/* truncate */}\\n\\n\\n## Storage is a solved problem {#391abf3711fb4cdc989cd95a352c95d3}\\n\\n\\nStoring blobs of data for your web application used to be more involved, I had to _think_ about it. Now I don\u2019t (much): when I build an app or website, that needs some blob storage my thoughts are:\\n\\n1. create a bucket or whatever it\u2019s called in one of some cloud provider, doesn\u2019t have to be the biggest name, they\u2019re all very reliable\\n2. put stuff in\\n3. get stuff out\\n\\nI don\u2019t care where much it is. Why? Because it\u2019s a **solved problem**. Remote blob storage is:\\n\\n- very cheap, and getting cheaper\\n- reliable [1]\\n\\nAt scale however, yes, you do have to think about cost, but those calculations are pretty straightforward business calculations. At anything below very large data, you don\u2019t have to think much about it, and this makes it a **solved problem**.\\n\\n\\nIt\u2019s a solved problem in a similar way that nature has solved storing information: replication, with automated mechanisms for damage repair/reconciliation [2].\\n\\n\\n## Compute is not a solved problem {#7998c587d99540c98564ff6646cb9977}\\n\\n\\nBecause you have to think about it. What I want: \\n\\n\\nI give you some application, some workflow, for example, a machine learning agent, some program I have created, some tool, and it requires from time to time, some level of computing power. You are able to automatically, safely, connect that application to the right level of compute resources as needed.\\n\\n- If the program is in the browser, I might be able to use the GPU, while the tab is open and running.\\n- If the program is downloaded and installed program, I have access to your entire computer, but due to that, security and parasitic programs become a problem.\\n- If I make available some cloud computing, it suddenly becomes complex, with lots of decisions, but with lots of scalable compute resources of different useful types.\\n\\nComputing resources are inherently valuable, and often able to be converted to $$ efficiently via automation.\\n\\n\\nObviously `storage !== compute` but if it were as easy, then I could distribute complex scientific simulations, and revive them years later, and they would \u201cjust work\u201d.\\n\\n\\nThe team at [https://metapage.io](https://metapage.io/) aim to solve that problem: compute as a simple commodity.\\n\\n\\nWhen we can treat compute as a commodity, we have more power over the compute providers. When they manage to get their system to be difficult to move from, you lose bargaining power.\\n\\n\\nPersonally, I default to [https://www.digitalocean.com/](https://www.digitalocean.com/). This isn\u2019t a paid plug! They just do a great job of making plenty of options, at the right complexity/resolution, not too many, not too few.\\n\\n\\nFor my full stacks, I\u2019m using AWS but not directly: my choice of platform vendor ([https://nhost.io](https://nhost.io/)) makes that decision for me.\\n\\n\\n# References {#f72739ff70d843c7b655beb4d3c9c218}\\n\\n\\n### [1] **How data is lost in the cloud** {#5ff5b92126b14c0cb53ba25f3a9f00d3}\\n\\n\\n[https://spanning.com/blog/how-data-is-lost-in-the-cloud/](https://spanning.com/blog/how-data-is-lost-in-the-cloud/)\\n\\n\\n### [2] **Mechanisms of ionizing-radiation resistance** {#7d4f1319505a45ddb4c4b1a2e8c47ceb}\\n\\n\\n[https://en.wikipedia.org/wiki/Deinococcus_radiodurans](https://en.wikipedia.org/wiki/Deinococcus_radiodurans)\\n\\n\\n```mermaid\\ngraph LR\\n  a[\\"Storage \u2705 but compute \ud83d\uded1\\"] \\n  b[\\"FAIR but for compute\\"]\\n  a --\x3e b\\n  click a \\"/blob-storage-is-solved-but-what-about-compute\\"\\n  click b \\"https://www.notion.so/metapages/FAIR-principles-apply-to-data-what-about-compute-192018579bb580608e3acdb7605db34a?pvs=4\\"\\n```\\n\\n\\nEND PAGE\\n\\n\\n```mermaid\\nflowchart LR\\n\\tst[\\"cloud data\\"]\\n\\tc[\\"compute\\"]\\n  urls[\\"workflows as URLs\\"]\\n  sims[\\"sharable simulations\\"]\\n\\tdt[\\"preserved through deep time\\"]\\n  what[\\"What is a metapage\\"]\\n\\n\\tst --\x3e urls\\n\\tc --\x3e urls --\x3e sims --\x3e dt\\n\\twhat --\x3e sims\\n\\turls --\x3e dt\\n  click st \\"/blob-storage-is-solved-but-what-about-compute\\"\\n  click urls \\"/url-configured-websites\\"\\n  click c \\"https://www.notion.so/metapages/Connect-compute-to-my-tasks-it-s-too-complicated-665f6bbcd4724d5ba3a4b66573473b69?pvs=4\\"\\n  click dt \\"https://www.notion.so/metapages/The-Internet-Archive-and-URL-configured-websites-f4b9e02d29234caa932bd553e1eaec75?pvs=4\\"\\n  click sims \\"https://www.notion.so/metapages/Sharable-Simulations-d8dcdfeed5ef423396086ce22875c735?pvs=4\\"\\n  click what \\"https://www.notion.so/metapages/What-is-a-metapage-What-problems-do-they-solve-570973a394b94e149a89b0455f53803e?pvs=4\\"\\n\\n\\n\\n\\n```"},{"id":"/a-new-kind-of-scientific-publishing","metadata":{"permalink":"/blog/a-new-kind-of-scientific-publishing","source":"@site/blog/blog/a-new-kind-of-scientific-publishing.md","title":"A New Kind of Scientific Publishing","description":"Scientific papers are static artifacts. You read them, but that is about the limit of your interaction.","date":"2025-03-29T03:42:11.186Z","formattedDate":"March 29, 2025","tags":[],"hasTruncateMarker":false,"authors":[{"name":"Dion Whitehead","title":"Metapages Inventor","url":"https://evolvedeeptimecomplex.systems/","imageURL":"https://github.com/dionjwa.png","key":"dion"}],"frontMatter":{"title":"A New Kind of Scientific Publishing","sidebar_position":8,"slug":"/a-new-kind-of-scientific-publishing","authors":["dion"]},"unlisted":false,"prevItem":{"title":"Blob storage is a solved problem- what about compute?","permalink":"/blog/blob-storage-is-solved-but-what-about-compute"},"nextItem":{"title":"Metapages- publish, embed, edit, share composable complete applications","permalink":"/blog/metapages-scientific-embed"}},"content":"Scientific papers are static artifacts. You read them, but that is about the limit of your interaction.\\n\\n\\nYou can embed code via links into e.g. PDFs, but code, like knowledge, fades into an insurmountable complexity barrier over time:\\n\\n- OS versions change, become outdated\\n- documentation, already sparse, becomes incomprehensible\\n- configuration and input files become versions so old, no-one even remembers\\n\\nEven papers dealing with purely computational research accumulate entropy over time.\\n\\n\\nPublishing journal articles as websites is a step in the right direction, but so far there is vast potential unrealized.\\n\\n\\n## A new way of publishing {#02bc63992c0f47e08034d7f39a31f6c7}\\n\\n- embed running code directly into the \u201carticle\u201d\\n\\t- \u201carticles\u201d are really a combination of applications/workflows/websites\\n- articles run in browsers, which are incentivized more than any other platform to run as much old stuff as possible (\u201dDo not break the internet\u201d), while remaining secure\\n- rely on code modules that are open source, and published in sources that are meant to be \u201cforever\u201d\\n\\n## Metapages: publish entire reproducible applications as URLs {#410fe60d9f394a0aaab5a7d85b678d78}\\n\\n\\n[https://docs.metapage.io/docs](https://docs.metapage.io/docs)\\n\\n\\n### _Metaframes_: websites as visualization with editable code {#f28ae045d0f54954bb6661ceecdd1d42}\\n\\n\\nThe following is a visualization of a network. The code can be edited by you, and the updated code runs directly in your browser. To edit or copy the code below, click in the top right below:\\n\\n\\n\\n<iframe scrolling=\\"no\\" allow=\\"fullscreen *; camera *; speaker *;\\" style={{width:\\"100%\\",height:\\"370px\\",overflow:\\"hidden\\"}} src=\\"https://app.metapage.io/mf/535glpo742\\"></iframe>\\n\\n\\n\\nThis is an example of a meta**frame**: an editable URL, where configuration/code/data is stored in the URL. A meta**page** is a set of possibly connected meta**frames**:\\n\\n\\n```mermaid\\nflowchart LR\\n  subgraph metapage [Metapage]\\n    direction LR\\n    mf1[\\"Metaframe A (iframe)\\"]\\n    mf2[\\"Metaframe B (iframe)\\"]\\n    mf3[\\"Metaframe C (iframe)\\"]\\n\\n    mf1 --\x3e mf2\\n    mf1 --\x3e mf3\\n    mf2 --\x3e mf3\\n  end\\n```\\n\\n\\n### Example 2: python and visualization in the browser, completely self-contained, and editable by you {#d996a5d5e88146dab4d10fd8e4d14cbb}\\n\\n\\nThis is discussed in more detail [here](/blog/metapages-scientific-embed)\\n\\n\\n\\n<iframe scrolling=\\"no\\" allow=\\"fullscreen *; camera *; speaker *;\\" style={{width:\\"100%\\",height:\\"949px\\",overflow:\\"hidden\\"}} src=\\"https://app.metapage.io/dion/py-mtfm-io-example-01-0f194baecd094163b47bdf0d07315af6\\"></iframe>\\n\\n\\n\\n### Example 3: visualization, user interaction {#401c5052e2764bf4a3abeb6fe7bf4eab}\\n\\n\\nThe following is an embedded metapage application that shows a visual of the sun, and allow you the user to rotate it with your hands (via your webcam):\\n\\n\\n\\n<iframe scrolling=\\"no\\" allow=\\"fullscreen *; camera *; speaker *;\\" style={{width:\\"100%\\",height:\\"1089px\\",overflow:\\"hidden\\"}} src=\\"https://app.metapage.io/dion/hands-rotate-sun-1bbeaf6d2feb4c03a58d179962b9b314\\"></iframe>\\n\\n\\n\\nIt consists of three interconnected, communicating _metaframes_ called a **metapage**_._ Below is the date flow:\\n\\n\\n![](./780791262.png)\\n\\n\\n## Conclusion {#64ffa3bfc1244f44ae9ce965a99db663}\\n\\n\\nThere is a huge space for durable, high information scientific publishing, that can be shared, remixed, and would allow both casual and deep interactions."},{"id":"/metapages-scientific-embed","metadata":{"permalink":"/blog/metapages-scientific-embed","source":"@site/blog/blog/metapages-scientific-embed.md","title":"Metapages- publish, embed, edit, share composable complete applications","description":"This is a deeper dive into an example metapage, that runs python, creates plots using matplotlib.","date":"2025-03-29T03:42:08.498Z","formattedDate":"March 29, 2025","tags":[],"hasTruncateMarker":false,"authors":[{"name":"Dion Whitehead","title":"Metapages Inventor","url":"https://evolvedeeptimecomplex.systems/","imageURL":"https://github.com/dionjwa.png","key":"dion"}],"frontMatter":{"title":"Metapages- publish, embed, edit, share composable complete applications","sidebar_position":7,"slug":"/metapages-scientific-embed","authors":["dion"]},"unlisted":false,"prevItem":{"title":"A New Kind of Scientific Publishing","permalink":"/blog/a-new-kind-of-scientific-publishing"},"nextItem":{"title":"How this blog is automated","permalink":"/blog/how-this-blog-is-automated"}},"content":"This is a deeper dive into an example [metapage](https://docs.metapage.io/docs), that runs python, creates plots using [matplotlib](https://matplotlib.org/).\\n\\n\\nConcepts:\\n\\n- The **entire** user created application exists _completely_ in the URL\\n\\t- When you edit the application below, you are editing the URL\\n\\t- Obviously there is a limit, but it\u2019s quite high\\n\\t- The URL can be shared, and then edited by someone else\\n\\t- If you have this URL, you own it. I do not store any application state, in this example at least\\n- Each of the boxes is a [_metaframe_](https://docs.metapage.io/docs/what-is-a-metaframe)_,_ which is a term used here to mean a separate webpage URL, with a small library to listen to inputs and send outputs (because the application is a graph of [_metaframes_](https://docs.metapage.io/docs/what-is-a-metaframe))\\n\\t- Because the components are also just URLs, and those URLs are _also_ editable, you can edit the components and the changes are persisted in the main parent URL\\n- You can edit the global configuration\\n\\t- This uses an [editor metaframe](https://editor.mtfm.io/) to do this\\n- You can edit the individual components\\n\\t- Metaframes have their own internal editing overlays/menus\\n- You can see the graph layout\\n\\t- This uses an [mermaid metaframe](https://app.metapage.io/mf/edit?mfk=vi5y75frll) to do this\\n\\n## The example published application {#86b0b533b2194720aba8d8657a03fb7b}\\n\\n\\nThis application runs python (in the browser via pyodide), and generates some plots, sends those as outputs to components that just display images.\\n\\n\\nYou can take this, modify it, and share it. No backend servers needed (except for serving plain static assets). Embed in your blog, group websites, company docs, etc.\\n\\n\\nClick any of the hamburger menus to edit the individual components:\\n\\n\\n![](./1169766679.png)\\n\\n\\n\\n<iframe scrolling=\\"no\\" allow=\\"fullscreen *; camera *; speaker *;\\" style={{width:\\"100%\\",height:\\"1069px\\",overflow:\\"hidden\\"}} src=\\"https://app.metapage.io/dion/pyodide-jupyter-and-matplotlib-in-the-browser-771ca08042c049dc9971a49772fc890b\\"></iframe>"},{"id":"/how-this-blog-is-automated","metadata":{"permalink":"/blog/how-this-blog-is-automated","source":"@site/blog/blog/how-this-blog-is-automated.md","title":"How this blog is automated","description":"Steps (actually, there is only one step: writing)","date":"2025-03-29T03:42:03.441Z","formattedDate":"March 29, 2025","tags":[],"hasTruncateMarker":false,"authors":[{"name":"Dion Whitehead","title":"Metapages Inventor","url":"https://evolvedeeptimecomplex.systems/","imageURL":"https://github.com/dionjwa.png","key":"dion"}],"frontMatter":{"title":"How this blog is automated","sidebar_position":6,"slug":"/how-this-blog-is-automated","authors":["dion"]},"unlisted":false,"prevItem":{"title":"Metapages- publish, embed, edit, share composable complete applications","permalink":"/blog/metapages-scientific-embed"},"nextItem":{"title":"The golden trifecta- justfiles, deno, and docker","permalink":"/blog/the-golden-three-just-deno-docker"}},"content":"```mermaid\\nflowchart LR\\n\\tmermaid[\\"mermaid diagrams to navigate posts\\"]\\n\\tblog[\\"automated this blog\\"]\\n\\tmermaid --\x3e blog\\n  click blog \\"/how-this-blog-is-automated\\"\\n  click mermaid \\"https://www.notion.so/metapages/Use-mermaid-diagrams-to-navigate-your-docs-or-blog-6d45b4ca7c3d40e699c63c29e306a871?pvs=4\\"\\n\\n```\\n\\n\\n### Steps (actually, there is only one step: writing) {#25ebe3c7689f477ca278e5b101e0a8fd}\\n\\n1. I write blog posts in [notion](https://notion.so/), structured how I like\\n2. **Automatically** ~15 minutes later the website + blog is generated from notion, using [docusaurus](https://docusaurus.io/) + [docu-notion](https://github.com/sillsdev/docu-notion), and pushed to github pages\\n3. ~~There\u2019s nothing I actually needed to do except write~~\\n\\nThat\u2019s it. I just write. The rest is automated.\\n\\n\\n![](./1555530775.png)\\n\\n\\n---\\n\\n\\n### How it works {#1900a1e531c64d3ab4896817eefc7eba}\\n\\n\\nSource: [https://github.com/dionjwa/dionjwa.github.io](https://github.com/dionjwa/dionjwa.github.io)\\n\\n\\n```mermaid\\nflowchart LR\\n    subgraph gh [github action every 30m]\\n        direction LR\\n        db[(notion.so)] --\x3e D[docu-notion]\\n        D --\x3e ds(docusaurus)\\n        ds --\x3e deploy[deploy to github pages ]\\n\\n    end\\n  \\n  click D \\"https://github.com/sillsdev/docu-notion\\"\\n  click ds \\"https://docusaurus.io/\\"\\n  click db \\"https://www.notion.so\\"\\n```\\n\\n\\nA github action runs a few scripts commands:\\n\\n1. Using [docu-notion](https://github.com/sillsdev/docu-notion) (and a root notion page) the docusaurus blog markdown is generated from specified notion pages\\n\\t1. I also use a custom set of plugins for various pieces: [https://www.npmjs.com/package/@metapages/docu-notion-plugins](https://www.npmjs.com/package/@metapages/docu-notion-plugins)\\n2. The docusaurus website is built\\n3. Then deployed to github pages\\n\\nIt\u2019s otherwise tricky to find a set of tools for writing/publishing a blog+resume with the following requirements (for me):\\n\\n- open source, or high data trust\\n- able to output from notion. I\u2019m too tired to convert to anything, like multiple publishing endpoints. I just want to write, and have everything be automated\\n- but also look good\\n- where i just write, and do absolutely nothing else. no saving, no publishing step.\\n- but also everything is backed up, with full version history\\n\\n---\\n\\n\\n# Published examples in the wild {#f3d0a352838849cf962de872111c8cfb}\\n\\n\\n\\n<div className=\\"custom-docunotion-row\\">\\n  <div className=\\"custom-docunotion-row-cell\\">\\n\\n<p><img src={require(\\"./880052731.png\\").default} /></p>\\n\\n  </div>\\n  <div className=\\"custom-docunotion-row-cell\\">\\n\\n<p><img src={require(\\"./1377012718.png\\").default} /></p>\\n\\n  </div>\\n</div>\\n\\n\\n\\n\\n![](./1470369498.png)"},{"id":"/the-golden-three-just-deno-docker","metadata":{"permalink":"/blog/the-golden-three-just-deno-docker","source":"@site/blog/blog/the-golden-three-just-deno-docker.md","title":"The golden trifecta- justfiles, deno, and docker","description":"","date":"2025-03-29T03:41:56.128Z","formattedDate":"March 29, 2025","tags":[],"hasTruncateMarker":false,"authors":[{"name":"Dion Whitehead","title":"Metapages Inventor","url":"https://evolvedeeptimecomplex.systems/","imageURL":"https://github.com/dionjwa.png","key":"dion"}],"frontMatter":{"title":"The golden trifecta- justfiles, deno, and docker","sidebar_position":5,"slug":"/the-golden-three-just-deno-docker","authors":["dion"]},"unlisted":false,"prevItem":{"title":"How this blog is automated","permalink":"/blog/how-this-blog-is-automated"},"nextItem":{"title":"Docker and wasm","permalink":"/blog/docker-wasm-web-containers"}},"content":"```mermaid\\nflowchart LR\\n\\t\\n    %%subgraph g [golden three]\\n        %%direction LR\\n        j[justfiles]\\n        d[deno]\\n        docker[docker]\\n        j --\x3e d --\x3e docker --\x3e j\\n    %%end\\n  click j \\"/one-justfile-to-bind-them-all\\"\\n  click d \\"/deno-and-tool-ecosystems\\"\\n  click docker \\"/docker-wasm-web-containers\\"\\n```"},{"id":"/docker-wasm-web-containers","metadata":{"permalink":"/blog/docker-wasm-web-containers","source":"@site/blog/blog/docker-wasm-web-containers.md","title":"Docker and wasm","description":"For building any project, you just need:","date":"2025-03-29T03:41:54.410Z","formattedDate":"March 29, 2025","tags":[],"hasTruncateMarker":false,"authors":[{"name":"Dion Whitehead","title":"Metapages Inventor","url":"https://evolvedeeptimecomplex.systems/","imageURL":"https://github.com/dionjwa.png","key":"dion"}],"frontMatter":{"title":"Docker and wasm","sidebar_position":4,"slug":"/docker-wasm-web-containers","authors":["dion"]},"unlisted":false,"prevItem":{"title":"The golden trifecta- justfiles, deno, and docker","permalink":"/blog/the-golden-three-just-deno-docker"},"nextItem":{"title":"Deno is part of the golden three","permalink":"/blog/deno-and-tool-ecosystems"}},"content":"```mermaid\\nflowchart LR\\n\\t\\n    %%subgraph g [golden three]\\n        %%direction LR\\n        j[justfiles]\\n        d[deno]\\n        docker[docker]\\n        j --\x3e d --\x3e docker --\x3e j\\n    %%end\\n  click j \\"/one-justfile-to-bind-them-all\\"\\n  click d \\"/deno-and-tool-ecosystems\\"\\n  click docker \\"/docker-wasm-web-containers\\"\\n```\\n\\n\\nFor building any project, you just need:\\n\\n- a platform agnostic reproducible environment: `docker`\\n- an entrypoint to display and run commands: [`just`](https://github.com/casey/just)\\n- a way to share/update scripts: `deno`\\n\\nThe requirement is not just for one project in a single point in time, it\u2019s for as MANY projects as possible over DEEP time. That\u2019s why the setup has to be **simple**, reproducible, and sharable (bespoke things fade into the complexity barrier quicker)\\n\\n\\n## Wasm {#544990805fd546a599ad5b7e6e5cd31e}\\n\\n\\nThis will be a game changer: super fast to deploy, arbitrary code, running at the edge or the browser, compiled from pretty much any language.\\n\\n\\nMy prediction is that WASM will take over edge compute, and even heavy workloads."},{"id":"/deno-and-tool-ecosystems","metadata":{"permalink":"/blog/deno-and-tool-ecosystems","source":"@site/blog/blog/deno-and-tool-ecosystems.md","title":"Deno is part of the golden three","description":"479dc190b1644ccdac96e631b4b44a0d}","date":"2025-03-29T03:41:50.504Z","formattedDate":"March 29, 2025","tags":[],"hasTruncateMarker":false,"authors":[{"name":"Dion Whitehead","title":"Metapages Inventor","url":"https://evolvedeeptimecomplex.systems/","imageURL":"https://github.com/dionjwa.png","key":"dion"}],"frontMatter":{"title":"Deno is part of the golden three","sidebar_position":3,"slug":"/deno-and-tool-ecosystems","authors":["dion"]},"unlisted":false,"prevItem":{"title":"Docker and wasm","permalink":"/blog/docker-wasm-web-containers"},"nextItem":{"title":"Justfiles - universal command control","permalink":"/blog/one-justfile-to-bind-them-all"}},"content":"```mermaid\\nflowchart LR\\n\\t\\n    %%subgraph g [golden three]\\n        %%direction LR\\n        j[justfiles]\\n        d[deno]\\n        docker[docker]\\n        j --\x3e d --\x3e docker --\x3e j\\n    %%end\\n  click j \\"/one-justfile-to-bind-them-all\\"\\n  click d \\"/deno-and-tool-ecosystems\\"\\n  click docker \\"/docker-wasm-web-containers\\"\\n```\\n\\n\\n# Deno: why it\u2019s good {#479dc190b1644ccdac96e631b4b44a0d}\\n\\n\\n**Problem:** scripts and utilities written for one repository, and you want to share them with other repositories\\n\\n- python: it\u2019s painful, and tied to the python ecosystem. You have to publish etc which is slow\\n\\t- this applies to most other languages\\n- specific languages mostly require a lot of specific install/tooling\\n\\nWith deno:\\n\\n- a single binary\\n- URL imports, so you don\u2019t ever have to manually install modules/libraries\\n- URL imports can point to anywhere, e.g. a github repo\\n- You can publish distinct packages, if you want, but you don\u2019t have to\\n- The entire npm ecosystem is available. Size matters.\\n\\nHaving used it for a while now, it definitely fits well into my ability to create / build / deploy servers as quickly and simply as possible, allowing me to effectively maintain a larger set of deployable code than before.\\n\\n\\n \\n\\n\\n# Connect the metapage file system {#c8596ab502054da8ac18c3440db48e72}"},{"id":"/one-justfile-to-bind-them-all","metadata":{"permalink":"/blog/one-justfile-to-bind-them-all","source":"@site/blog/blog/one-justfile-to-bind-them-all.md","title":"Justfiles - universal command control","description":"b19d4c49d3a343cfa8398d2677e39bb7}","date":"2025-03-29T03:41:49.572Z","formattedDate":"March 29, 2025","tags":[],"hasTruncateMarker":false,"authors":[{"name":"Dion Whitehead","title":"Metapages Inventor","url":"https://evolvedeeptimecomplex.systems/","imageURL":"https://github.com/dionjwa.png","key":"dion"}],"frontMatter":{"title":"Justfiles - universal command control","sidebar_position":2,"slug":"/one-justfile-to-bind-them-all","authors":["dion"]},"unlisted":false,"prevItem":{"title":"Deno is part of the golden three","permalink":"/blog/deno-and-tool-ecosystems"},"nextItem":{"title":"URL Configured Websites","permalink":"/blog/url-configured-websites"}},"content":"```mermaid\\nflowchart LR\\n\\t\\n    %%subgraph g [golden three]\\n        %%direction LR\\n        j[justfiles]\\n        d[deno]\\n        docker[docker]\\n        j --\x3e d --\x3e docker --\x3e j\\n    %%end\\n  click j \\"/one-justfile-to-bind-them-all\\"\\n  click d \\"/deno-and-tool-ecosystems\\"\\n  click docker \\"/docker-wasm-web-containers\\"\\n```\\n\\n\\n# [`just`](https://just.systems/man/en/) solves a set of complex problems: {#b19d4c49d3a343cfa8398d2677e39bb7}\\n\\n\\nI want a single command to give me a CLI menu, where ever I am\\n\\n\\n![](./91296038.png)\\n\\n\\n> I\u2019m tired, and forgetful, and I just want this repository to build or test or deploy, and I don\u2019t want to remember all the specifics, I just want to get things done and move on.\\n\\n\\nWhen you have multiple repositories you create scripts + tools for \\n\\n- CI operations\\n- Development\\n- Testing\\n- All kinds of other tasks\\n\\nYou want to organise these commands, so you put them in a `Make` file or some custom CLI thing.\\n\\n\\nBut: \\n\\n- the custom thing isn\u2019t easily transferrable to other projects/repositories\\n- `Make` is very specific, and has a bunch of ugly workarounds for doing simple things (e.g. `.PHONY`)\\n\\nso you and up with a bunch of kludge.\\n\\n\\n## Enter [`just`](https://just.systems/man/en/). {#7e62c704e1af4e32820f2f2de80273be}\\n\\n\\n`just` is exactly what I needed:\\n\\n- simple well formatted commands in any language\\n- introspection\\n- the utilities you need when munging strings/paths etc\\n\\nNow **ALL** my projects have a `justfile` in the root\\n\\n\\nI expect the following:\\n\\n- Most common commands FIRST (ie. NOT alphabetical order)\\n\\t- `dev`, `test`, `deploy` / `publish`\\n- Commands check for dependencies and libraries/modules at runtime, and automatically install if needed\\n\\t- Don\u2019t make me write commands for no reason, there\u2019s no reason to not automatically install e.g. npm modules if they are missing.\\n- List various links e.g. to the github repo, to the published URL endpoint, to the docs\\n\\nI alias `just` to `j` so that I am just `j`\'ing everywhere. It\u2019s short, fast, and gets me reliably building/publishing even if I have forgotten all the details of the commands.\\n\\n\\n## Sharing {#fd5d981cdca54b9fa96e60dba428c947}\\n\\n\\n`just` on it\u2019s own doesn\u2019t solve the problem of sharing complex commands. That\u2019s where [`deno`](https://docs.deno.com/runtime/manual) comes in. It\u2019s a single binary, running Typescript. I know Typescript is not everyone\u2019s cup of tea, but it\u2019s typed, gets the job done, and the URL imports make sharing between repositories MUCH easier. \\n\\n\\nBasically before URL imports, I struggled with how to share complex build/publish/deploy scripts.\\n\\n\\n## Just Words of Wisdom (To Myself) about `just` etiquette {#a660199f26954368939f6ff59ee255ae}\\n\\n\\n### Always include the full path of commands {#d2d23cebe20b4d158daa8400e3cdf9ac}\\n\\n\\nIf you document something with what &lt;command&gt; you should run, e.g.\\n\\n\\n```bash\\n# And then you type: \'just <command>\'\\n```\\n\\n\\nbut you are `</over/here>` but you have to be `</somewhere/else>` then please include the full path so there is never any doubt and you don\u2019t have to go `fd`\'ing: `\'</be/specific> just <command>\'`. It doesn\u2019t have to be this exact formula, but try to remove this kind of friction.\\n\\n\\n### Include links to important locations {#6b0c9c026c4a45678c754ae92ffb7d6b}\\n\\n\\nSee the links at the bottom, they are a click away\\n\\n\\n![](./1890867935.png)"},{"id":"/url-configured-websites","metadata":{"permalink":"/blog/url-configured-websites","source":"@site/blog/blog/url-configured-websites.md","title":"URL Configured Websites","description":"URLs can safely and effectively store user created code or configuration (even credentials [1]) (access to things). URLs can also . This allows anyone with the link to not only view the created resources but also to edit.","date":"2025-03-29T03:41:47.519Z","formattedDate":"March 29, 2025","tags":[],"hasTruncateMarker":true,"authors":[{"name":"Dion Whitehead","title":"Metapages Inventor","url":"https://evolvedeeptimecomplex.systems/","imageURL":"https://github.com/dionjwa.png","key":"dion"}],"frontMatter":{"title":"URL Configured Websites","sidebar_position":1,"slug":"/url-configured-websites","authors":["dion"]},"unlisted":false,"prevItem":{"title":"Justfiles - universal command control","permalink":"/blog/one-justfile-to-bind-them-all"}},"content":"URLs can safely and effectively store user created code or configuration (even [credentials](https://neilmadden.blog/2019/01/16/can-you-ever-safely-include-credentials-in-a-url/) [1]) (access to things). URLs can also . This allows anyone with the link to not only view the created resources but also to **edit.**\\n\\n\\n{/* truncate */}\\n\\n\\n## Use URL hash parameters to store code / config / state {#99468beeddb741dfae03c3cdade858ed}\\n\\n\\n:::tip\\n\\nIt gives users much more control and creativity over websites\\n\\n:::\\n\\n\\n\\n\\n### Example: diagrams stored in the URL {#f45e2af1ccc34c4ea68ba2de23983d02}\\n\\n\\n**The url defines how it\u2019s stored state is displayed**\\n\\n\\n[https://mermaid.live/](https://mermaid.live/) is an excellent example. As soon as you go to that link, the link looks long: that\u2019s because it has encoded the diagram it displays completely in the URL hash parameters:\\n\\n\\n![](./1164251445.png)\\n\\n\\nURL:\\n\\n\\n[https://mermaid.live/edit#pako:eNpVjk2Lg0AMhv9KyGkL9Q94WGh1t5fCFurN6SFo7AztfDBGpKj_fcd62c0pvM_zhkzY-JYxx-7px0ZTFKhK5SDNoS50NL1Y6m](https://mermaid.live/edit#pako:eNpVjk2Lg0AMhv9KyGkL9Q94WGh1t5fCFurN6SFo7AztfDBGpKj_fcd62c0pvM_zhkzY-JYxx-7px0ZTFKhK5SDNoS50NL1Y6m-QZZ_ziQWsd_ya4fhx8tBrH4Jx993mH1cJium8agyijXssGyre_R_HM5T1mYL4cPtLqtHP8FWbi07n_xMdObW-647yjrKGIhQU3wru0XK0ZNr0_rQmCkWzZYV5WlvuaHiKQuWWpNIg_vpyDeYSB97jEFoSLg3dI9ktXH4B_cJWqw)\u2026 (I cut it for readability)\\n\\n\\nWhat is happening?\\n\\n- The code that describes the diagram is encoded and store in the hash parameters (after the `#`) of the URL.\\n- That URL can now be shared and directly edited\\n- No backend server is involved in storing the data, only for serving the assets (a _**static**_ website)\\n- Everything after the `#` is **NOT** sent to the server\\n\\n### Example 2: rich contextual and specific error messages when developing software {#1d532f2929214d90a333b147c9c0b770}\\n\\n\\n![](./2099585714.png)\\n\\n\\nUnfortunately I cannot include the link here because this was local development on my own computer. The above is an error message given as a URL in javascript react. It\u2019s great because the error specific to my code is embedded with further help and full documentation. \\n\\n\\n## Modern browsers can handle very large URLs {#d32c6439fe384d90b342350311b68d89}\\n\\n\\nIn 2006, [IE8s URL limit was 2083 characters](https://support.microsoft.com/en-us/kb/208427). [IE9 has a similar limit](https://stackoverflow.com/questions/3721034/how-long-of-a-url-can-internet-explorer-9-take). \\n\\n\\n[The original HTTP/1.1 specification put no limit on the length of the URL](http://www.faqs.org/rfcs/rfc2616.html)\\n\\n\\nIn 2022, a new update was published [and says](https://www.rfc-editor.org/rfc/rfc9110#section-4.1-5):\\n\\n\\n> It is RECOMMENDED that all senders and recipients support, at a minimum, URIs with lengths of 8000 octets in protocol elements. Note that this implies some structures and on-wire representations (for example, the request line in HTTP/1.1) will necessarily be larger in some cases.\\n\\n\\nHowever, this is talking about URLs over the wire. For the browser address bar itself, limits are much much higher:\\n\\n\\n```text\\nBrowser     Address bar   document.location\\n                          or anchor tag\\n------------------------------------------\\nChrome          32779           >64k\\nAndroid          8192           >64k\\nFirefox          >64k           >64k\\nSafari           >64k           >64k\\nIE11             2047           5120\\nEdge 16          2047          10240\\n```\\n\\n\\nSource: [https://stackoverflow.com/questions/417142/what-is-the-maximum-length-of-a-url-in-different-browsers](https://stackoverflow.com/questions/417142/what-is-the-maximum-length-of-a-url-in-different-browsers)\\n\\n\\n## You can store large amounts of code in the hash parameters, and allow users to configure complex websites {#852ea18949cc47ad9c89488cf81019ce}\\n\\n\\nSingle metaframe pinned\\n\\n\\n\\n<iframe scrolling=\\"no\\" allow=\\"fullscreen *; camera *; speaker *;\\" style={{width:\\"100%\\",height:\\"370px\\",overflow:\\"hidden\\"}} src=\\"https://app.metapage.io/mf/CRCyFFm29e\\"></iframe>\\n\\n\\n\\nIn the example above, enough code was embedded in the link to describe a 3D with a bunch of complex behaviour. Someone else can take that URL, and directly modify it, run it, then share the modified URL. \\n\\n\\nThis way, apps can be both self-contained, but also highly configurable and shareable, allowing a high degree of direct collaboration not under centralized control.\\n\\n\\n**Edit:**  click the top right in the embed above: \\n\\n\\n![](./1690007555.png)\\n\\n\\nand you will be able to directly edit the code running, and copy and reuse it yourself.\\n\\n\\n# References {#bfe0a74a53c3401e80a39b6baa8ce923}\\n\\n\\n[https://neilmadden.blog/2019/01/16/can-you-ever-safely-include-credentials-in-a-url/](https://neilmadden.blog/2019/01/16/can-you-ever-safely-include-credentials-in-a-url/)\\n\\n\\nEND PAGE\\n\\n\\n```mermaid\\nflowchart LR\\n\\tst[\\"cloud data\\"]\\n\\tc[\\"compute\\"]\\n  urls[\\"workflows as URLs\\"]\\n  sims[\\"sharable simulations\\"]\\n\\tdt[\\"preserved through deep time\\"]\\n  what[\\"What is a metapage\\"]\\n\\n\\tst --\x3e urls\\n\\tc --\x3e urls --\x3e sims --\x3e dt\\n\\twhat --\x3e sims\\n\\turls --\x3e dt\\n  click st \\"/blob-storage-is-solved-but-what-about-compute\\"\\n  click urls \\"/url-configured-websites\\"\\n  click c \\"https://www.notion.so/metapages/Connect-compute-to-my-tasks-it-s-too-complicated-665f6bbcd4724d5ba3a4b66573473b69?pvs=4\\"\\n  click dt \\"https://www.notion.so/metapages/The-Internet-Archive-and-URL-configured-websites-f4b9e02d29234caa932bd553e1eaec75?pvs=4\\"\\n  click sims \\"https://www.notion.so/metapages/Sharable-Simulations-d8dcdfeed5ef423396086ce22875c735?pvs=4\\"\\n  click what \\"https://www.notion.so/metapages/What-is-a-metapage-What-problems-do-they-solve-570973a394b94e149a89b0455f53803e?pvs=4\\"\\n\\n\\n\\n\\n```\\n\\n\\n```mermaid\\nflowchart LR\\n\\tmf[\\"metaframes\\"]\\n\\turl[\\"browser state in the URL\\"]\\n\\tmp[\\"metapages\\"]\\n\\n\\tmf --\x3e url --\x3e mp\\n  click url \\"/url-configured-websites\\"\\n  click mf \\"https://www.notion.so/metapages/Metaframes-websites-as-plug-and-play-editable-sharable-components-b216a09349374106adb279a28ee00aec?pvs=4\\"\\n  click mp \\"https://www.notion.so/metapages/What-is-a-metapage-What-problems-do-they-solve-570973a394b94e149a89b0455f53803e?pvs=4\\"\\n```"}]}')}}]);