"use strict";(self.webpackChunkdionjwa_resume_docusaurus=self.webpackChunkdionjwa_resume_docusaurus||[]).push([[477],{10:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"/how-this-blog-is-automated","metadata":{"permalink":"/blog/how-this-blog-is-automated","source":"@site/blog/blog/how-this-blog-is-automated.md","title":"How this blog is automated","description":"1. I write blog posts in notion, structured how I like","date":"2023-09-23T22:43:49.212Z","formattedDate":"September 23, 2023","tags":[],"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"How this blog is automated","sidebar_position":5,"slug":"/how-this-blog-is-automated"},"nextItem":{"title":"The golden trifecta- justfiles, deno, and docker","permalink":"/blog/the-golden-three-just-deno-docker"}},"content":"1. I write blog posts in [notion](https://notion.so/), structured how I like\\n2. Automatically ~15 minutes later the website + blog is generated from notion, using [docusaurus](https://docusaurus.io/) + [docu-notion](https://github.com/sillsdev/docu-notion), and pushed to github pages\\n3. ~~There\u2019s nothing I actually needed to do except write~~\\n\\nThat\u2019s it. I just write. The rest is automated.\\n\\n\\n### How it works {#1900a1e531c64d3ab4896817eefc7eba}\\n\\n\\nSource: [https://github.com/dionjwa/dionjwa.github.io](https://github.com/dionjwa/dionjwa.github.io)\\n\\n\\n```mermaid\\nflowchart LR\\n    subgraph gh [github action every 30m]\\n        direction LR\\n        db[(notion.so)] --\x3e D[docu-notion]\\n        D --\x3e ds(docusaurus)\\n        ds --\x3e deploy[deploy to github pages ]\\n\\n    end\\n  \\n  click D \\"https://github.com/sillsdev/docu-notion\\"\\n  click ds \\"https://docusaurus.io/\\"\\n  click db \\"https://www.notion.so\\"\\n```\\n\\n\\nA github action runs a few scripts commands:\\n\\n1. Using [docu-notion](https://github.com/sillsdev/docu-notion) (and a root notion page) the docusaurus blog markdown is generated from specified notion pages\\n\\t1. I also use a custom set of plugins for various pieces: [https://www.npmjs.com/package/@metapages/docu-notion-plugins](https://www.npmjs.com/package/@metapages/docu-notion-plugins)\\n2. The docusaurus website is built\\n3. Then deployed to github pages\\n\\nIt\u2019s otherwise tricky to find a set of tools for writing/publishing a blog+resume with the following requirements (for me):\\n\\n- open source, or high data trust\\n- able to output from notion. I\u2019m too tired to convert to anything, like multiple publishing endpoints. I just want to write, and have everything be automated\\n- but also look good\\n- where i just write, and do absolutely nothing else. no saving, no publishing step.\\n- but also everything is backed up, with full version history"},{"id":"/the-golden-three-just-deno-docker","metadata":{"permalink":"/blog/the-golden-three-just-deno-docker","source":"@site/blog/blog/the-golden-three-just-deno-docker.md","title":"The golden trifecta- justfiles, deno, and docker","description":"","date":"2023-09-23T22:43:48.988Z","formattedDate":"September 23, 2023","tags":[],"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"The golden trifecta- justfiles, deno, and docker","sidebar_position":4,"slug":"/the-golden-three-just-deno-docker"},"prevItem":{"title":"How this blog is automated","permalink":"/blog/how-this-blog-is-automated"},"nextItem":{"title":"Docker and wasm","permalink":"/blog/docker-wasm-web-containers"}},"content":"```mermaid\\nflowchart LR\\n    subgraph g [golden three]\\n        direction LR\\n        j[justfiles]\\n        d[deno]\\n        docker[docker]\\n        j --\x3e d --\x3e docker --\x3e j\\n    end\\n  click j \\"/one-justfile-to-bind-them-all\\"\\n  click d \\"/deno-and-tool-ecosystems\\"\\n  click docker \\"/docker-wasm-web-containers\\"\\n```"},{"id":"/docker-wasm-web-containers","metadata":{"permalink":"/blog/docker-wasm-web-containers","source":"@site/blog/blog/docker-wasm-web-containers.md","title":"Docker and wasm","description":"For building any project, you just need:","date":"2023-09-23T22:43:47.984Z","formattedDate":"September 23, 2023","tags":[],"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Docker and wasm","sidebar_position":3,"slug":"/docker-wasm-web-containers"},"prevItem":{"title":"The golden trifecta- justfiles, deno, and docker","permalink":"/blog/the-golden-three-just-deno-docker"},"nextItem":{"title":"Deno is part of the golden three","permalink":"/blog/deno-and-tool-ecosystems"}},"content":"```mermaid\\nflowchart LR\\n    subgraph g [golden three]\\n        direction LR\\n        j[justfiles]\\n        d[deno]\\n        docker[docker]\\n        j --\x3e d --\x3e docker --\x3e j\\n    end\\n  click j \\"/one-justfile-to-bind-them-all\\"\\n  click d \\"/deno-and-tool-ecosystems\\"\\n  click docker \\"/docker-wasm-web-containers\\"\\n```\\n\\n\\nFor building any project, you just need:\\n\\n- a platform agnostic reproducible environment: `docker`\\n- an entrypoint to display and run commands: [`just`](https://github.com/casey/just)\\n- a way to share/update scripts: `deno`\\n\\nThe requirement is not just for one project in a single point in time, it\u2019s for as MANY projects as possible over DEEP time. That\u2019s why the setup has to be **simple**, reproducible, and sharable (bespoke things fade into the complexity barrier quicker)\\n\\n\\n## Wasm {#544990805fd546a599ad5b7e6e5cd31e}\\n\\n\\nThis will be a game changer: super fast to deploy, arbitrary code, running at the edge or the browser, compiled from pretty much any language.\\n\\n\\nMy prediction is that WASM will take over edge compute, and even heavy workloads."},{"id":"/deno-and-tool-ecosystems","metadata":{"permalink":"/blog/deno-and-tool-ecosystems","source":"@site/blog/blog/deno-and-tool-ecosystems.md","title":"Deno is part of the golden three","description":"479dc190b1644ccdac96e631b4b44a0d}","date":"2023-09-23T22:43:47.660Z","formattedDate":"September 23, 2023","tags":[],"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Deno is part of the golden three","sidebar_position":2,"slug":"/deno-and-tool-ecosystems"},"prevItem":{"title":"Docker and wasm","permalink":"/blog/docker-wasm-web-containers"},"nextItem":{"title":"Justfiles - universal command control","permalink":"/blog/one-justfile-to-bind-them-all"}},"content":"```mermaid\\nflowchart LR\\n    subgraph g [golden three]\\n        direction LR\\n        j[justfiles]\\n        d[deno]\\n        docker[docker]\\n        j --\x3e d --\x3e docker --\x3e j\\n    end\\n  click j \\"/one-justfile-to-bind-them-all\\"\\n  click d \\"/deno-and-tool-ecosystems\\"\\n  click docker \\"/docker-wasm-web-containers\\"\\n```\\n\\n\\n# Deno: why it\u2019s good {#479dc190b1644ccdac96e631b4b44a0d}\\n\\n\\n**Problem:** scripts and utilities written for one repository, and you want to share them with other repositories\\n\\n- python: it\u2019s painful, and tied to the python ecosystem. You have to publish etc which is slow\\n\\t- this applies to most other languages\\n- specific languages mostly require a lot of specific install/tooling\\n\\nWith deno:\\n\\n- a single binary\\n- URL imports, so you don\u2019t ever have to manually install modules/libraries\\n- URL imports can point to anywhere, e.g. a github repo\\n- You can publish distinct packages, if you want, but you don\u2019t have to\\n- The entire npm ecosystem is available. Size matters.\\n\\nHaving used it for a while now, it definitely fits well into my ability to create / build / deploy servers as quickly and simply as possible, allowing me to effectively maintain a larger set of deployable code than before."},{"id":"/one-justfile-to-bind-them-all","metadata":{"permalink":"/blog/one-justfile-to-bind-them-all","source":"@site/blog/blog/one-justfile-to-bind-them-all.md","title":"Justfiles - universal command control","description":"b19d4c49d3a343cfa8398d2677e39bb7}","date":"2023-09-23T22:43:47.192Z","formattedDate":"September 23, 2023","tags":[],"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Justfiles - universal command control","sidebar_position":1,"slug":"/one-justfile-to-bind-them-all"},"prevItem":{"title":"Deno is part of the golden three","permalink":"/blog/deno-and-tool-ecosystems"}},"content":"```mermaid\\nflowchart LR\\n    subgraph g [golden three]\\n        direction LR\\n        j[justfiles]\\n        d[deno]\\n        docker[docker]\\n        j --\x3e d --\x3e docker --\x3e j\\n    end\\n  click j \\"/one-justfile-to-bind-them-all\\"\\n  click d \\"/deno-and-tool-ecosystems\\"\\n  click docker \\"/docker-wasm-web-containers\\"\\n```\\n\\n\\n# [`just`](https://just.systems/man/en/) solves a set of complex problems: {#b19d4c49d3a343cfa8398d2677e39bb7}\\n\\n\\nI want a single command to give me a CLI menu, where ever I am\\n\\n\\n![](./91296038.png)\\n\\n\\n> I\u2019m tired, and forgetful, and I just want this repository to build or test or deploy, and I don\u2019t want to remember all the specifics, I just want to get things done and move on.\\n\\n\\nWhen you have multiple repositories you create scripts + tools for \\n\\n- CI operations\\n- Development\\n- Testing\\n- All kinds of other tasks\\n\\nYou want to organise these commands, so you put them in a `Make` file or some custom CLI thing.\\n\\n\\nBut: \\n\\n- the custom thing isn\u2019t easily transferrable to other projects/repositories\\n- `Make` is very specific, and has a bunch of ugly workarounds for doing simple things (e.g. `.PHONY`)\\n\\nso you and up with a bunch of kludge.\\n\\n\\n## Enter [`just`](https://just.systems/man/en/). {#7e62c704e1af4e32820f2f2de80273be}\\n\\n\\n`just` is exactly what I needed:\\n\\n- simple well formatted commands in any language\\n- introspection\\n- the utilities you need when munging strings/paths etc\\n\\nNow **ALL** my projects have a `justfile` in the root\\n\\n\\nI expect the following:\\n\\n- Most common commands FIRST (ie. NOT alphabetical order)\\n\\t- `test`, `deploy` / `publish`\\n- Commands check for dependencies and libraries/modules at runtime, and automatically install if needed\\n\\t- Don\u2019t make me write commands for no reason, there\u2019s no reason to not automatically install e.g. npm modules if they are missing.\\n- List various links e.g. to the github repo, to the published URL endpoint, to the docs\\n\\nI alias `just` to `j` so that I am just `j`\'ing everywhere. It\u2019s short, fast, and gets me reliably building/publishing even if I have forgotten all the details of the commands.\\n\\n\\n## Sharing {#fd5d981cdca54b9fa96e60dba428c947}\\n\\n\\n`just` on it\u2019s own doesn\u2019t solve the problem of sharing complex commands. That\u2019s where [`deno`](https://docs.deno.com/runtime/manual) comes in. It\u2019s a single binary, running Typescript. I know Typescript is not everyone\u2019s cup of tea, but it\u2019s typed, gets the job done, and the URL imports make sharing between repositories MUCH easier. \\n\\n\\nBasically before URL imports, I struggled with how to share complex build/publish/deploy scripts.\\n\\n\\n## Just Words of Wisdom (To Myself) about `just` etiquette {#a660199f26954368939f6ff59ee255ae}\\n\\n\\n### Always include the full path of commands {#d2d23cebe20b4d158daa8400e3cdf9ac}\\n\\n\\nIf you document something with what &lt;command&gt; you should run, e.g.\\n\\n\\n```bash\\n# And then you type: \'just <command>\'\\n```\\n\\n\\nbut you are `</over/here>` but you have to be `</somewhere/else>` then please include the full path so there is never any doubt and you don\u2019t have to go `fd`\'ing: `\'</be/specific> just <command>\'`. It doesn\u2019t have to be this exact formula, but try to remove this kind of friction.\\n\\n\\n### Include links to important locations {#6b0c9c026c4a45678c754ae92ffb7d6b}\\n\\n\\nSee the links at the bottom, they are a click away\\n\\n\\n![](./1890867935.png)"}]}')}}]);